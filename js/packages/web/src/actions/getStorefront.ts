import {
  ArweaveTransaction,
  Storefront,
  ArweaveQueryResponse,
} from '@oyster/common';
import {
  createClient,
  RedisClientOptions,
  RedisClientType,
  RedisModules,
  RedisScripts,
} from 'redis';
import moment from 'moment';
import { maybeCDN } from '../utils/cdn';

const ARWEAVE_URL = process.env.NEXT_PUBLIC_ARWEAVE_URL;
const REDIS_URL = process.env.REDIS_URL;
const REDIS_TLS_ENABLED = process.env.REDIS_TLS_ENABLED === 'true';

const fetchdenyListCacheKey = async () => {
  const res = await fetch('https://api.holaplex.com', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      jsonrpc: '2.0',
      method: 'getOwnerDenylist',
      params: [],
      id: 1337,
    }),
  });
  // @ts-ignore
  return await res.json();
};

const fetchFromSource = async (
  subdomain: string,
): Promise<Storefront | null> => {
  try {
    const response = await fetch(`${ARWEAVE_URL}/graphql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: `
            query GetStorefrontTheme($subdomain: String!) {
              transactions(tags:[{ name: "holaplex:metadata:subdomain", values: [$subdomain]}], first: 1) {
                edges {
                  node {
                    id
                    tags {
                      name
                      value
                    }
                  }
                }
              }
            }
          `,
        variables: {
          subdomain,
        },
      }),
    });

    const {
      data: {
        transactions: {
          edges: [{ node }],
        },
      },
    } = (await response.json()) as ArweaveQueryResponse;
    const transaction = node as ArweaveTransaction;

    const values = transaction.tags.reduce((acc: any, tag) => {
      acc[tag.name] = tag.value || null;

      return acc;
    }, {});

    const storefront = {
      subdomain,
      pubkey: values['solana:pubkey'],
      theme: {
        logo: maybeCDN(values['holaplex:theme:logo:url']),
        banner: maybeCDN(values['holaplex:theme:banner:url'] || ''),
        stylesheet: maybeCDN(`${ARWEAVE_URL}/${transaction.id}`),
        color: {
          background: values['holaplex:theme:color:background'],
          primary: values['holaplex:theme:color:primary'],
        },
        font: {
          title: values['holaplex:theme:font:title'],
          text: values['holaplex:theme:font:text'],
        },
      },
      meta: {
        favicon: maybeCDN(
          values['holaplex:metadata:favicon:url'] || '/favicon-16x16.png',
        ),
        title:
          values['holaplex:metadata:page:title'] ||
          `Holaplex - ${subdomain} | NFT Marketplace`,
        description:
          values['holaplex:metadata:page:description'] ||
          'A NFT marketplace generated by Holaplex',
      },
    };
    return storefront;
  } catch (err: any) {
    console.error(err);
    return null;
  }
};

const denyListCacheKey = 'ownerdenyListV1';

const denyList = async (
  client: RedisClientType<
    {
      json: {
        ARRAPPEND: typeof import('@node-redis/json/dist/commands/ARRAPPEND');
        arrAppend: typeof import('@node-redis/json/dist/commands/ARRAPPEND');
        ARRINDEX: typeof import('@node-redis/json/dist/commands/ARRINDEX');
        arrIndex: typeof import('@node-redis/json/dist/commands/ARRINDEX');
        ARRINSERT: typeof import('@node-redis/json/dist/commands/ARRINSERT');
        arrInsert: typeof import('@node-redis/json/dist/commands/ARRINSERT');
        ARRLEN: typeof import('@node-redis/json/dist/commands/ARRLEN');
        arrLen: typeof import('@node-redis/json/dist/commands/ARRLEN');
        ARRPOP: typeof import('@node-redis/json/dist/commands/ARRPOP');
        arrPop: typeof import('@node-redis/json/dist/commands/ARRPOP');
        ARRTRIM: typeof import('@node-redis/json/dist/commands/ARRTRIM'); // @ts-ignore // @ts-ignore
        arrTrim: typeof import('@node-redis/json/dist/commands/ARRTRIM');
        DEBUG_MEMORY: typeof import('@node-redis/json/dist/commands/DEBUG_MEMORY');
        debugMemory: typeof import('@node-redis/json/dist/commands/DEBUG_MEMORY');
        DEL: typeof import('@node-redis/json/dist/commands/DEL');
        del: typeof import('@node-redis/json/dist/commands/DEL');
        FORGET: typeof import('@node-redis/json/dist/commands/FORGET');
        forget: typeof import('@node-redis/json/dist/commands/FORGET');
        GET: typeof import('@node-redis/json/dist/commands/GET');
        get: typeof import('@node-redis/json/dist/commands/GET');
        MGET: typeof import('@node-redis/json/dist/commands/MGET');
        mGet: typeof import('@node-redis/json/dist/commands/MGET');
        NUMINCRBY: typeof import('@node-redis/json/dist/commands/NUMINCRBY');
        numIncrBy: typeof import('@node-redis/json/dist/commands/NUMINCRBY');
        NUMMULTBY: typeof import('@node-redis/json/dist/commands/NUMMULTBY');
        numMultBy: typeof import('@node-redis/json/dist/commands/NUMMULTBY');
        OBJKEYS: typeof import('@node-redis/json/dist/commands/OBJKEYS');
        objKeys: typeof import('@node-redis/json/dist/commands/OBJKEYS');
        OBJLEN: typeof import('@node-redis/json/dist/commands/OBJLEN');
        objLen: typeof import('@node-redis/json/dist/commands/OBJLEN');
        RESP: typeof import('@node-redis/json/dist/commands/RESP');
        resp: typeof import('@node-redis/json/dist/commands/RESP');
        SET: typeof import('@node-redis/json/dist/commands/SET');
        set: typeof import('@node-redis/json/dist/commands/SET');
        STRAPPEND: typeof import('@node-redis/json/dist/commands/STRAPPEND');
        strAppend: typeof import('@node-redis/json/dist/commands/STRAPPEND');
        STRLEN: typeof import('@node-redis/json/dist/commands/STRLEN');
        strLen: typeof import('@node-redis/json/dist/commands/STRLEN');
        TYPE: typeof import('@node-redis/json/dist/commands/TYPE');
        type: typeof import('@node-redis/json/dist/commands/TYPE');
      };
      ft: {
        _LIST: typeof import('@node-redis/search/dist/commands/_LIST');
        _list: typeof import('@node-redis/search/dist/commands/_LIST');
        ALTER: typeof import('@node-redis/search/dist/commands/ALTER');
        alter: typeof import('@node-redis/search/dist/commands/ALTER');
        AGGREGATE: typeof import('@node-redis/search/dist/commands/AGGREGATE');
        aggregate: typeof import('@node-redis/search/dist/commands/AGGREGATE');
        ALIASADD: typeof import('@node-redis/search/dist/commands/ALIASADD');
        aliasAdd: typeof import('@node-redis/search/dist/commands/ALIASADD');
        ALIASDEL: typeof import('@node-redis/search/dist/commands/ALIASDEL');
        aliasDel: typeof import('@node-redis/search/dist/commands/ALIASDEL');
        ALIASUPDATE: typeof import('@node-redis/search/dist/commands/ALIASUPDATE');
        aliasUpdate: typeof import('@node-redis/search/dist/commands/ALIASUPDATE');
        CONFIG_GET: typeof import('@node-redis/search/dist/commands/CONFIG_GET');
        configGet: typeof import('@node-redis/search/dist/commands/CONFIG_GET');
        CONFIG_SET: typeof import('@node-redis/search/dist/commands/CONFIG_SET');
        configSet: typeof import('@node-redis/search/dist/commands/CONFIG_SET');
        CREATE: typeof import('@node-redis/search/dist/commands/CREATE');
        create: typeof import('@node-redis/search/dist/commands/CREATE');
        DICTADD: typeof import('@node-redis/search/dist/commands/DICTADD');
        dictAdd: typeof import('@node-redis/search/dist/commands/DICTADD');
        DICTDEL: typeof import('@node-redis/search/dist/commands/DICTDEL');
        dictDel: typeof import('@node-redis/search/dist/commands/DICTDEL');
        DICTDUMP: typeof import('@node-redis/search/dist/commands/DICTDUMP');
        dictDump: typeof import('@node-redis/search/dist/commands/DICTDUMP');
        DROPINDEX: typeof import('@node-redis/search/dist/commands/DROPINDEX');
        dropIndex: typeof import('@node-redis/search/dist/commands/DROPINDEX');
        EXPLAIN: typeof import('@node-redis/search/dist/commands/EXPLAIN');
        explain: typeof import('@node-redis/search/dist/commands/EXPLAIN');
        EXPLAINCLI: typeof import('@node-redis/search/dist/commands/EXPLAINCLI');
        explainCli: typeof import('@node-redis/search/dist/commands/EXPLAINCLI');
        INFO: typeof import('@node-redis/search/dist/commands/INFO');
        info: typeof import('@node-redis/search/dist/commands/INFO');
        PROFILESEARCH: typeof import('@node-redis/search/dist/commands/PROFILE_SEARCH');
        profileSearch: typeof import('@node-redis/search/dist/commands/PROFILE_SEARCH');
        PROFILEAGGREGATE: typeof import('@node-redis/search/dist/commands/PROFILE_AGGREGATE');
        profileAggregate: typeof import('@node-redis/search/dist/commands/PROFILE_AGGREGATE');
        SEARCH: typeof import('@node-redis/search/dist/commands/SEARCH');
        search: typeof import('@node-redis/search/dist/commands/SEARCH');
        SPELLCHECK: typeof import('@node-redis/search/dist/commands/SPELLCHECK');
        spellCheck: typeof import('@node-redis/search/dist/commands/SPELLCHECK');
        SUGADD: typeof import('@node-redis/search/dist/commands/SUGADD');
        sugAdd: typeof import('@node-redis/search/dist/commands/SUGADD');
        SUGDEL: typeof import('@node-redis/search/dist/commands/SUGDEL');
        sugDel: typeof import('@node-redis/search/dist/commands/SUGDEL');
        SUGGET_WITHPAYLOADS: typeof import('@node-redis/search/dist/commands/SUGGET_WITHPAYLOADS');
        sugGetWithPayloads: typeof import('@node-redis/search/dist/commands/SUGGET_WITHPAYLOADS');
        SUGGET_WITHSCORES_WITHPAYLOADS: typeof import('@node-redis/search/dist/commands/SUGGET_WITHSCORES_WITHPAYLOADS');
        sugGetWithScoresWithPayloads: typeof import('@node-redis/search/dist/commands/SUGGET_WITHSCORES_WITHPAYLOADS');
        SUGGET_WITHSCORES: typeof import('@node-redis/search/dist/commands/SUGGET_WITHSCORES');
        sugGetWithScores: typeof import('@node-redis/search/dist/commands/SUGGET_WITHSCORES');
        SUGGET: typeof import('@node-redis/search/dist/commands/SUGGET');
        sugGet: typeof import('@node-redis/search/dist/commands/SUGGET');
        SUGLEN: typeof import('@node-redis/search/dist/commands/SUGLEN');
        sugLen: typeof import('@node-redis/search/dist/commands/SUGLEN');
        SYNDUMP: typeof import('@node-redis/search/dist/commands/SYNDUMP');
        synDump: typeof import('@node-redis/search/dist/commands/SYNDUMP');
        SYNUPDATE: typeof import('@node-redis/search/dist/commands/SYNUPDATE');
        synUpdate: typeof import('@node-redis/search/dist/commands/SYNUPDATE');
        TAGVALS: typeof import('@node-redis/search/dist/commands/TAGVALS');
        tagVals: typeof import('@node-redis/search/dist/commands/TAGVALS');
      };
    },
    RedisScripts
  >,
) => {
  let pubkeydenyList: Array<String> = [];
  try {
    const cachedValue = (await client.get(denyListCacheKey)) || '[]';
    pubkeydenyList = JSON.parse(cachedValue) || [];

    if (!pubkeydenyList.length) {
      const resp = await fetchdenyListCacheKey();
      pubkeydenyList = resp.result;
      client.set(
        denyListCacheKey,
        // @ts-ignore
        JSON.stringify(pubkeydenyList),
      );
      client.expire(denyListCacheKey, 300); // cache the entire list for 5 minutes
    }
  } catch (error) {
    console.error('failed to fetch denylist', error);
  }

  return pubkeydenyList;
};

export const getStorefront = async (
  subdomain: string,
): Promise<Storefront | undefined> => {
  let cached: Storefront | undefined = undefined;
  const redisClientOptions: RedisClientOptions<RedisModules, RedisScripts> = {
    url: REDIS_URL,
  };

  if (REDIS_TLS_ENABLED) {
    redisClientOptions.socket = {
      tls: true,
      rejectUnauthorized: false,
    };
  }

  const client = createClient(redisClientOptions);

  await client.connect();

  const [storefront, timestamp] = await Promise.all([
    client.get(subdomain),
    client.get(`${subdomain}-timestamp`),
  ]);

  if (storefront) {
    cached = JSON.parse(storefront);
  }

  const now = moment();
  const lastSavedAt = moment(timestamp);

  const duration = moment.duration(now.diff(lastSavedAt)).as('minutes');
  const denies = await denyList(client);

  if (duration < 2 && cached) {
    if (denies.includes(cached.pubkey)) {
      await client.quit();
      return undefined;
    }

    await client.quit();
    return cached;
  }

  const source = await fetchFromSource(subdomain);

  if (source) {
    await client
      .multi()
      .set(subdomain, JSON.stringify(source))
      .set(`${subdomain}-timestamp`, now.format())
      .exec();

    if (denies.includes(source.pubkey)) {
      await client.quit();
      return undefined;
    }

    await client.quit();
    return source;
  }

  await client.quit();

  return cached;
};
